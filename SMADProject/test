using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using SMAD.Entities;
using SMAD.ViewModels;
using SMAD.Repo;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace SMADTests.ViewModels
{
    [TestClass]
    public class ProductionPerformanceViewModelTests
    {
        private Mock<IProductionRepo> _repoMock;
        private ProductionPerformanceViewModel _viewModel;

        [TestInitialize]
        public void Setup()
        {
            // Arrange: Mock the repository
            _repoMock = new Mock<IProductionRepo>();

            // Create a new ViewModel instance with the mocked repository
            _viewModel = new ProductionPerformanceViewModel();
        }

        [TestMethod]
        public void FilterMetrics_ValidInput_ShouldReturnFilteredMetrics()
        {
            // Arrange: Set up the mock data
            var productionLine = new ProductionLine { LineID = 1, LineName = "Line 1" };
            var startDate = new DateTime(2024, 10, 1);
            var endDate = new DateTime(2024, 10, 10);

            var mockMetrics = new List<ProductionMetric>
            {
                new ProductionMetric { LineID = 1, MetricDate = new DateTime(2024, 10, 2), ProductionRate = 50, Efficiency = 90 },
                new ProductionMetric { LineID = 1, MetricDate = new DateTime(2024, 10, 5), ProductionRate = 70, Efficiency = 85 }
            };

            // Set up the repository to return the mock metrics
            _repoMock.Setup(repo => repo.FilterMetrics(productionLine, startDate, endDate))
                     .Returns(mockMetrics);

            // Act: Set ViewModel properties and call the filter method
            _viewModel.SelectedProductionLine = productionLine;
            _viewModel.StartDate = startDate;
            _viewModel.EndDate = endDate;
            _viewModel.FilterMetrics();

            // Assert: Check that the metrics were filtered correctly
            Assert.AreEqual(2, _viewModel.ProductionMetrics.Count);
            Assert.AreEqual(50, _viewModel.ProductionMetrics[0].ProductionRate);
            Assert.AreEqual(70, _viewModel.ProductionMetrics[1].ProductionRate);
        }

        [TestMethod]
        public void FilterMetrics_NoSelectedLine_ShouldShowErrorMessage()
        {
            // Act: Call the filter method without setting a production line
            _viewModel.StartDate = new DateTime(2024, 10, 1);
            _viewModel.EndDate = new DateTime(2024, 10, 10);

            // Use a message box interceptor or simply check the default behavior.
            try
            {
                _viewModel.FilterMetrics();
                Assert.Fail("Expected an exception for missing production line selection.");
            }
            catch (Exception ex)
            {
                Assert.IsTrue(ex.Message.Contains("Please select a production line."));
            }
        }

        [TestMethod]
        public void FilterMetrics_InvalidDateRange_ShouldShowErrorMessage()
        {
            // Arrange: Set up an invalid date range
            _viewModel.SelectedProductionLine = new ProductionLine { LineID = 1, LineName = "Line 1" };
            _viewModel.StartDate = new DateTime(2024, 10, 10);
            _viewModel.EndDate = new DateTime(2024, 10, 1); // End date is before start date

            try
            {
                // Act: Call the filter method
                _viewModel.FilterMetrics();
                Assert.Fail("Expected an exception for invalid date range.");
            }
            catch (Exception ex)
            {
                // Assert: Verify the expected error message
                Assert.IsTrue(ex.Message.Contains("Please select both start and end dates."));
            }
        }
    }
}
